Graph g;
// se carga en el setup y en marcaPosicion a partir del resourceId... 
//Resource r...   refactorizado a rir
String resourceId;


//marcaPosicion : behavior implementado en metodo: 
	// si se hace click en value no se selecciona el node y viceversa
int selectedValueIndex;
Attribute oldSelectedAttribute;
//este sirve para identificar numericamente en la lista de nodos exitentes del grafo
// solo se selecciona si se pincha en el blanco del circulo
int selectedNodeIndex;

// //////////////INCORPORADOS POR MI
Attribute newSelectedAttribute;
Node miNewNode;



void printState(){
println("selectedValueIndex:"+selectedValueIndex);
if(oldSelectedAttribute!=null )println("oldSelectedAttribute:"+oldSelectedAttribute.getName());
else println("oldSelectedAttribute null");
if(newSelectedAttribute!=null )println("newSelectedAttribute:"+newSelectedAttribute.getName());
else println("newSelectedAttribute null");
println("selectedNodeIndex:"+selectedNodeIndex);
if(miNewNode!=null)
println("miNewNode.getId():"+miNewNode.getGraph().dameIndiceNodo(miNewNode));
else println("miNewNode null");
println("g.getDragNode():"+g.getDragNode());

}


boolean iniciar=true;
String lineCap;
boolean debug=false;
boolean hover=true;
String mensaje="hola";


void setup() {	
	loadImagenesHome();
	//console.info("resourceId: "+resourceId);
	g = new Graph();
	// Activate font for output
	textFont(defaultFont, fontSize);

  resize();
  fill(0);
  smooth();
  frameRate(30);
	background(234,239,224);

	if (resourceId) {
	Resource rir;
	
		rir = fetchResource(resourceId);
		
		g.addNode(root = new Node(rir));
		g.setSelectedNode(root);

		$('aside').html(rir.html);
	}
	iniciaPVectors();
	
 	
}




void draw() {
	if(iniciar){
		setR(515);
		iniciar=false;
		setup();
	}
	strokeCap(SQUARE);
 // esto se evaluaba cuando existia la posibilidad de aparecer la pantalla en blanco 
 // if (g.nodes.size()>0) {
    g.tick();
    background(234,239,224);
	paintBackgroundImages();
    g.draw();
     pushStyle();
     textAlign(LEFT);
     fill(234,239,224);
     noStroke();
     rect(origenContacto.x-95, origenContacto.y+40,400,15);
     fill(0);
     text("Realizado con la ayuda del Ministerio de Educaci√≥n, Cultura y Deporte",origenContacto.x-24,origenContacto.y+50);
     popStyle();
}
//carga ::: oldSelectedAttribute, selectedValueIndex,selectedNodeIndex
void marcaPosicion() {

	if (!resourceId) return;

	// si no hay dragging	
	if (g.getDragNode()==null) {
	   			   

	   	Resource rrr = g.getSelectedNode().getSubject();
		ArrayList values = rrr.getValues();

		oldSelectedAttribute = rrr.getSelectedAttribute();

		
		//aqui selectedValueIndex se actualiza iterando por los attributes y values del resource
		selectedValueIndex=actualizaSelectedValueIndex(values);
		// si hay value seleccionado... es decir si ha hecho click en alguno
		if (selectedValueIndex!=null) {
		  // si hay un cambio de attribute actualiza el resource!
		  actualizaResourcePorCambioDeAttribute(rrr, values);
		}

		siNoHaySeleccionLimpiaResource(rrr);
		selectedNodeIndex=seleccionNodeIndex();
		}
	
	
}

void actualizaResourcePorCambioDeAttribute(rrr, values){

		   if (oldSelectedAttribute != rrr.getSelectedAttribute()) {							  		   float offset = 0;
					
		   if (rrr.previousSelectedAttribute!=null) rrr.previousSelectedAttribute.weight = 1.0;
		   rrr.selectedAttribute.weight = 4.0;
		   // r.transitioning = true;
		   float targetAngle = (values.get(selectedValueIndex).angleStart +values.get(selectedValueIndex).angleStop) / 2;
		   if (oldSelectedAttribute!=null) oldSelectedAttribute.targetWeight = 1.0;
		   rrr.getSelectedAttribute().targetWeight = 4.0;

		   rrr.update();
		   currentAngle = (rrr.getValues().get(selectedValueIndex).angleStart +rrr.getValues().get(selectedValueIndex).angleStop) / 2

		   offset = targetAngle-currentAngle;
		   float targetAdjustment = rrr.angleAdjustment+offset;
		   if (targetAdjustment<0) {
			   targetAdjustment = TWO_PI - targetAdjustment;
		   }
					 rrr.setAngleAdjustment(targetAdjustment);
			}

}

void actualizaSelectedValueIndex(values){
//inicializa valor a devolver
		selectedValueIndex = null;

		// Iterate over values
	for (int i = 0; i < values.size(); i++) {
			Value valor=values.get(i);
			if (valor.mouseOver()) {
				selectedValueIndex = i;
				newSelectedAttribute=valor.getAttribute();
				if(newSelectedAttribute!=null)
				miNewNode=newSelectedAttribute.getResource().nod;
			}
		}
		return 	selectedValueIndex;

}
void seleccionNodeIndex(){
	selectedNodeIndex = null;
		// Iterate over nodes
		for (int i=0; i< g.nodes.size(); i++) {
			if (g.nodes.get(i).mouseOver()) {
				selectedNodeIndex = i;
			}
		}
		return selectedNodeIndex;
}

void siNoHaySeleccionLimpiaResource(rrr){
		if (selectedValueIndex==null && rrr.selectedAttribute!=null) {
			rrr.selectedAttribute.weight = 1.0;
			 rrr.setSelectedAttribute(null);
		}		

}


void mousePressed() {
	if (compruebaResetButton()) return;

	marcaPosicion();
	printState();
	return;
	
  if (mouseButton == LEFT) {
  		//este selectedNode es el ultimo seleccionado o cargado con fetchResource
		Node selectedNode = g.getSelectedNode();
		//println(selectedNode.getSubject().name);

		if(selectedNode==null) return;

		Resource lastResourceSelected = selectedNode.getSubject();
		if (selectedValueIndex != null) {
			// Close current resource... ya hay un circulo anterior
			lastResourceSelected.setClosed();
	
			r2 = fetchResource(lastResourceSelected.getValues().get(selectedValueIndex).getId());
			
			// Check if resource already exists
	    int i = 0;
	    Node n = null;
	    
	    while (i < g.nodes.size() && !n) {
				if (g.nodes.get(i).getSubject().getId()==r2.getId())
					n = g.nodes.get(i);
	      i++;
	    }

	    if (!n) {
				g.addNode(newNode = new Node(r2));
				g.addEdge(new Edge(selectedNode, newNode));
				g.setSelectedNode(newNode);
			} else {
				g.addEdge(new Edge(selectedNode, n));
				g.setSelectedNode(n);
				 n.getSubject().setOpen();				
		}
			
		} else if (selectedNodeIndex != null) {
			// ocurre cuando se activa un nodo pasivo ... pasa a 1 primer plano

			selectedNode = g.nodes.get(selectedNodeIndex);
			

			g.setDragNode(selectedNode);
			if (g.getSelectedNode()!=selectedNode) {
  			lastResourceSelected.setClosed();
  			selectedNode.getSubject().setOpen();
  			$('aside').html(selectedNode.getSubject().html);
  			g.setSelectedNode(selectedNode);
  			if(selectedNode.clasi!=null && selectedNode.clasi=="Museo")
			activaDesplegablesMuseo();
			}
		}else{
			if(debug)println("// selectedValueIndex == null and selectedNodeIndex == null");		
		
		}
				
  } else { // Right click
		Node selectedNode = g.getSelectedNode();
		Resource r = selectedNode.getSubject();
	}
}

void mouseReleased() {
  g.setDragNode(null);
}

void mouseDragged() {
  if (g.getDragNode() != null) {
    g.getDragNode().setPos(mouseX, mouseY, 0);
  }
}

boolean compruebaPress(PVector inicio, PVector fin ){
return (mouseX>=inicio.x && mouseX<=(inicio.x+fin.x)) && (mouseY>=inicio.y && mouseY<=(inicio.y+fin.y));
}
